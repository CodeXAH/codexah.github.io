<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-17T11:37:34.070Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>1.spring注解版</title>
    <link href="http://yoursite.com/2020/04/30/1.spring%E6%B3%A8%E8%A7%A3%E7%89%88/"/>
    <id>http://yoursite.com/2020/04/30/1.spring%E6%B3%A8%E8%A7%A3%E7%89%88/</id>
    <published>2020-04-30T01:30:30.618Z</published>
    <updated>2020-04-17T11:37:34.070Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-spring注解版"><a href="#1-spring注解版" class="headerlink" title="1.spring注解版"></a>1.spring注解版</h1><h3 id="1-1-Bean和-Configuration注解"><a href="#1-1-Bean和-Configuration注解" class="headerlink" title="1.1@Bean和@Configuration注解"></a>1.1@Bean和@Configuration注解</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>:<span class="string">给ioc容器中注册一个Bean；类型为返回值的类型，id为方法名，当调用容器.getBean()可以获取该组件的内容</span></span><br><span class="line"><span class="meta">&lt;bean</span> <span class="string">id="方法名"&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="meta">@Configuration</span>:<span class="string">标注在类上表示该类为配置类，一般配合@Bean（标注在方法上）注解一起使用</span></span><br></pre></td></tr></table></figure><h3 id="1-2-Lazy懒加载"><a href="#1-2-Lazy懒加载" class="headerlink" title="1.2@Lazy懒加载"></a>1.2@Lazy懒加载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Lazy默认是争对单实例的bean</span><br><span class="line">一般默认的单实例bean在容器创建好的时候就创建号了单实例bean</span><br><span class="line">但是使用了@Lazy之后，只要调用getbean（）方法的时候才会创建单实例的bean</span><br></pre></td></tr></table></figure><h3 id="1-3-Component等注解与-ComponentScan的关系"><a href="#1-3-Component等注解与-ComponentScan的关系" class="headerlink" title="1.3@Component等注解与@ComponentScan的关系"></a>1.3@Component等注解与@ComponentScan的关系</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component（@Controller、@Service、@Repository）</span>:<span class="string">注解可以通过内路径的扫描把标注的类自动加入的spring容器中。</span></span><br><span class="line"><span class="meta">@ComponentScan(value</span>=<span class="string">"com.atguigu",includeFilters = &#123;</span></span><br><span class="line"><span class="meta">@Filter(type</span>=<span class="string">FilterType.ANNOTATION,classes=&#123;Controller.class&#125;),</span></span><br><span class="line"><span class="meta">@Filter(type</span>=<span class="string">FilterType.ASSIGNABLE_TYPE,classes=&#123;BookService.class&#125;),</span></span><br><span class="line"><span class="meta">@Filter(type</span>=<span class="string">FilterType.CUSTOM,classes=&#123;MyTypeFilter.class&#125;)</span></span><br><span class="line"><span class="meta">&#125;,useDefaultFilters</span> = <span class="string">false)</span></span><br><span class="line"><span class="meta">//excludeFilters</span> = <span class="string">Filter[] ：指定扫描的时候按照什么规则排除那些组件</span></span><br><span class="line"><span class="meta">//includeFilters</span> = <span class="string">Filter[] ：指定扫描的时候只需要包含哪些组件,</span></span><br><span class="line"><span class="meta">需设置useDefaultFilters</span> = <span class="string">false</span></span><br><span class="line"><span class="attr">//FilterType.ANNOTATION：按照注解</span></span><br><span class="line"><span class="attr">//FilterType.ASSIGNABLE_TYPE：按照给定的类型；</span></span><br><span class="line"><span class="attr">//FilterType.ASPECTJ：使用ASPECTJ表达式</span></span><br><span class="line"><span class="attr">//FilterType.REGEX：使用正则指定</span></span><br><span class="line"><span class="attr">//FilterType.CUSTOM：使用自定义规则</span></span><br><span class="line"><span class="attr">//classes是一个List（列表）：可以些很多个元素</span></span><br></pre></td></tr></table></figure><h3 id="1-4-import注解"><a href="#1-4-import注解" class="headerlink" title="1.4@import注解"></a>1.4@import注解</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">@Import(color.class)表示快速导入某个组件到容器中</span></span><br></pre></td></tr></table></figure><h3 id="1-5使用spring提供的FactoryBean（工厂bean）"><a href="#1-5使用spring提供的FactoryBean（工厂bean）" class="headerlink" title="1.5使用spring提供的FactoryBean（工厂bean）"></a>1.5使用spring提供的FactoryBean（工厂bean）</h3><h5 id="1-FactoryBean是一个接口需要实现"><a href="#1-FactoryBean是一个接口需要实现" class="headerlink" title="1.FactoryBean是一个接口需要实现"></a>1.FactoryBean是一个接口需要实现</h5><h5 id="2-默认获取到的是工厂bean调用getObject创建的对象"><a href="#2-默认获取到的是工厂bean调用getObject创建的对象" class="headerlink" title="2.默认获取到的是工厂bean调用getObject创建的对象"></a>2.默认获取到的是工厂bean调用getObject创建的对象</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个Spring定义的FactoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Color</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回一个Color对象，这个对象会添加到容器中</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Color <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"ColorFactoryBean...getObject..."</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Color();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> Color<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是单例？</span></span><br><span class="line"><span class="comment">//true：这个bean是单实例，在容器中保存一份</span></span><br><span class="line"><span class="comment">//false：多实例，每次获取都会创建一个新的bean；</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-EnableConfigurationProperties"><a href="#3-EnableConfigurationProperties" class="headerlink" title="3.@EnableConfigurationProperties"></a>3.@EnableConfigurationProperties</h5><p>@EnableConfigurationProperties(HttpEncodingProperties.class)  //启动指定类的ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中</p><h5 id="4-Conditional"><a href="#4-Conditional" class="headerlink" title="4.@Conditional"></a>4.@Conditional</h5><p>@Conditionalxxxx:根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-spring注解版&quot;&gt;&lt;a href=&quot;#1-spring注解版&quot; class=&quot;headerlink&quot; title=&quot;1.spring注解版&quot;&gt;&lt;/a&gt;1.spring注解版&lt;/h1&gt;&lt;h3 id=&quot;1-1-Bean和-Configuration注解&quot;&gt;&lt;a
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/04/30/hello-world/"/>
    <id>http://yoursite.com/2020/04/30/hello-world/</id>
    <published>2020-04-30T01:11:34.354Z</published>
    <updated>2020-04-30T01:11:34.355Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
